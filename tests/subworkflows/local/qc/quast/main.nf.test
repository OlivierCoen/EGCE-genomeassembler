nextflow_workflow {

    name "Test Workflow QC_QUAST"
    script "subworkflows/local/qc/quast/main.nf"
    workflow "QC_QUAST"
    tag "quast"

    test("One assembly") {

        tag "quast_one_assembly"

        setup {

            run("MAP_TO_REFERENCE") {
                script "subworkflows/local/map_to_reference/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id: "test", genome_size: 1500000 ],
                        file( '$projectDir/tests/test_data/pecat/input/reads.fasta.gz', checkIfExists: true)
                    ])
                    input[1] = Channel.of(
                        [
                            [ id: "test", genome_size: 1500000 ],
                            file( '$projectDir/tests/test_data/pecat/output/primary.fasta', checkIfExists: true)
                        ]
                    )
                    """
                }
            }

        }

        when {

            workflow {
                """
                input[0] = MAP_TO_REFERENCE.out.aln_to_assembly_bam_ref
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

    test("Pecat output") {

        tag "quast_pecat_output"

        setup {

            run("MAP_TO_REFERENCE") {
                script "subworkflows/local/map_to_reference/main.nf"
                process {
                    """
                    input[0] = Channel.of(
                        [
                            [ id: "test", genome_size: 1500000 ],
                            file( '$projectDir/tests/test_data/pecat/input/reads.small.fasta.gz', checkIfExists: true)
                        ]
                    )
                    input[1] = Channel.of(
                        [
                            [ id: "test", genome_size: 1500000 ],
                            file( '$projectDir/tests/test_data/pecat/output/primary.fasta', checkIfExists: true)
                        ],
                        [
                            [ id: "test", genome_size: 1500000 ],
                            file( '$projectDir/tests/test_data/pecat/output/alternate.fasta', checkIfExists: true)
                        ],
                        [
                            [ id: "test", genome_size: 1500000 ],
                            file( '$projectDir/tests/test_data/pecat/output/haplotype_1.fasta', checkIfExists: true)
                        ],
                        [
                            [ id: "test", genome_size: 1500000 ],
                            file( '$projectDir/tests/test_data/pecat/output/haplotype_2.fasta', checkIfExists: true)
                        ],
                        [
                            [ id: "test", genome_size: 1500000 ],
                            file( '$projectDir/tests/test_data/pecat/output/rest_first_assembly.fasta', checkIfExists: true)
                        ],
                        [
                            [ id: "test", genome_size: 1500000 ],
                            file( '$projectDir/tests/test_data/pecat/output/rest_second_assembly.fasta', checkIfExists: true)
                        ]
                    )
                    """
                }
            }

        }

        when {

            workflow {
                """
                input[0] = MAP_TO_REFERENCE.out.aln_to_assembly_bam_ref
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

    test("Multiple assemblies") {

        tag "quast_multiple_assemblies"

        setup {

            run("MAP_TO_REFERENCE") {
                script "subworkflows/local/map_to_reference/main.nf"
                process {
                    """
                    input[0] = Channel.of(
                        [
                            [ id: "test1", genome_size: 1500000 ],
                            file( '$projectDir/tests/test_data/pecat/input/reads.fasta.gz', checkIfExists: true)
                        ],
                        [
                            [ id: "test2", genome_size: 1500000 ],
                            file( '$projectDir/tests/test_data/pecat/input/reads.fasta.gz', checkIfExists: true)
                        ]
                    )
                    input[1] = Channel.of(
                        [
                            [ id: "test1", genome_size: 1500000 ],
                            file( '$projectDir/tests/test_data/pecat/output/primary.fasta', checkIfExists: true)
                        ],
                        [
                            [ id: "test1", genome_size: 1500000 ],
                            file( '$projectDir/tests/test_data/pecat/output/alternate.fasta', checkIfExists: true)
                        ],
                        [
                            [ id: "test2", genome_size: 1500000 ],
                            file( '$projectDir/tests/test_data/pecat/output/primary.fasta', checkIfExists: true)
                        ],
                        [
                            [ id: "test2", genome_size: 1500000 ],
                            file( '$projectDir/tests/test_data/pecat/output/alternate.fasta', checkIfExists: true)
                        ]
                    )
                    """
                }
            }

        }

        when {

            workflow {
                """
                input[0] = MAP_TO_REFERENCE.out.aln_to_assembly_bam_ref
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

}
